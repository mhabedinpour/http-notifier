// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/circuit-breaker/circuit-breaker.go

// Package circuitbreaker is a generated GoMock package.
package circuitbreaker

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockCircuitBreaker is a mock of CircuitBreaker interface.
type MockCircuitBreaker[R any] struct {
	ctrl     *gomock.Controller
	recorder *MockCircuitBreakerMockRecorder[R]
}

// MockCircuitBreakerMockRecorder is the mock recorder for MockCircuitBreaker.
type MockCircuitBreakerMockRecorder[R any] struct {
	mock *MockCircuitBreaker[R]
}

// NewMockCircuitBreaker creates a new mock instance.
func NewMockCircuitBreaker[R any](ctrl *gomock.Controller) *MockCircuitBreaker[R] {
	mock := &MockCircuitBreaker[R]{ctrl: ctrl}
	mock.recorder = &MockCircuitBreakerMockRecorder[R]{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCircuitBreaker[R]) EXPECT() *MockCircuitBreakerMockRecorder[R] {
	return m.recorder
}

// Execute mocks base method.
func (m *MockCircuitBreaker[R]) Execute(req func() (R, error)) (R, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute", req)
	ret0, _ := ret[0].(R)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Execute indicates an expected call of Execute.
func (mr *MockCircuitBreakerMockRecorder[R]) Execute(req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockCircuitBreaker[R])(nil).Execute), req)
}
