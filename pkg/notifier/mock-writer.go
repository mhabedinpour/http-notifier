// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/notifier/writer.go

// Package notifier is a generated GoMock package.
package notifier

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockWriter is a mock of Writer interface.
type MockWriter[T Notification] struct {
	ctrl     *gomock.Controller
	recorder *MockWriterMockRecorder[T]
}

// MockWriterMockRecorder is the mock recorder for MockWriter.
type MockWriterMockRecorder[T Notification] struct {
	mock *MockWriter[T]
}

// NewMockWriter creates a new mock instance.
func NewMockWriter[T Notification](ctrl *gomock.Controller) *MockWriter[T] {
	mock := &MockWriter[T]{ctrl: ctrl}
	mock.recorder = &MockWriterMockRecorder[T]{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWriter[T]) EXPECT() *MockWriterMockRecorder[T] {
	return m.recorder
}

// Write mocks base method.
func (m *MockWriter[T]) Write(notification T) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Write", notification)
	ret0, _ := ret[0].(error)
	return ret0
}

// Write indicates an expected call of Write.
func (mr *MockWriterMockRecorder[T]) Write(notification interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Write", reflect.TypeOf((*MockWriter[T])(nil).Write), notification)
}
