// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/retry-handler/retry-handler.go

// Package retryhandler is a generated GoMock package.
package retryhandler

import (
	reflect "reflect"
	time "time"

	gomock "go.uber.org/mock/gomock"
)

// MockRetryHandler is a mock of RetryHandler interface.
type MockRetryHandler[T any] struct {
	ctrl     *gomock.Controller
	recorder *MockRetryHandlerMockRecorder[T]
}

// MockRetryHandlerMockRecorder is the mock recorder for MockRetryHandler.
type MockRetryHandlerMockRecorder[T any] struct {
	mock *MockRetryHandler[T]
}

// NewMockRetryHandler creates a new mock instance.
func NewMockRetryHandler[T any](ctrl *gomock.Controller) *MockRetryHandler[T] {
	mock := &MockRetryHandler[T]{ctrl: ctrl}
	mock.recorder = &MockRetryHandlerMockRecorder[T]{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRetryHandler[T]) EXPECT() *MockRetryHandlerMockRecorder[T] {
	return m.recorder
}

// CalculateSleep mocks base method.
func (m *MockRetryHandler[T]) CalculateSleep(notification T, attempts int, err error) time.Duration {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CalculateSleep", notification, attempts, err)
	ret0, _ := ret[0].(time.Duration)
	return ret0
}

// CalculateSleep indicates an expected call of CalculateSleep.
func (mr *MockRetryHandlerMockRecorder[T]) CalculateSleep(notification, attempts, err interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CalculateSleep", reflect.TypeOf((*MockRetryHandler[T])(nil).CalculateSleep), notification, attempts, err)
}
