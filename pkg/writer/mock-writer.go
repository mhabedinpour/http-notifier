// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/writer/writer.go

// Package writer is a generated GoMock package.
package writer

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockWriter is a mock of Writer interface.
type MockWriter[T Writable, R any] struct {
	ctrl     *gomock.Controller
	recorder *MockWriterMockRecorder[T, R]
}

// MockWriterMockRecorder is the mock recorder for MockWriter.
type MockWriterMockRecorder[T Writable, R any] struct {
	mock *MockWriter[T, R]
}

// NewMockWriter creates a new mock instance.
func NewMockWriter[T Writable, R any](ctrl *gomock.Controller) *MockWriter[T, R] {
	mock := &MockWriter[T, R]{ctrl: ctrl}
	mock.recorder = &MockWriterMockRecorder[T, R]{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWriter[T, R]) EXPECT() *MockWriterMockRecorder[T, R] {
	return m.recorder
}

// Write mocks base method.
func (m *MockWriter[T, R]) Write(notification T) (R, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Write", notification)
	ret0, _ := ret[0].(R)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Write indicates an expected call of Write.
func (mr *MockWriterMockRecorder[T, R]) Write(notification interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Write", reflect.TypeOf((*MockWriter[T, R])(nil).Write), notification)
}
